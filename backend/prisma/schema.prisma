// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  profilePictureUrl String?
  email  String   @unique
  name String
  username  String   @unique
  password  String

  posts Post[]
  reactions           PostReaction[]
  stories   Story[]
  viewedStories StoryViewer[]

  userFriends       Friend[] @relation(name: "userFriendships")
  friendUserFriends Friend[] @relation(name: "friendFriendships")

  sendedMesssage Message[]  @relation("SenderUser")
  receivedMessage   Message[]   @relation("ReceiverUser")

  sentFriendRequests    FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Message {
  id        Int      @id @default(autoincrement())
  senderId  Int? 
  receiverId Int? 
  content   String?
  createdAt DateTime @default(now())
  storyId   Int? 

  sender     User?     @relation("SenderUser",fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User?     @relation("ReceiverUser",fields: [receiverId], references: [id], onDelete: Cascade)
  story      Story?    @relation("StoryReplies", fields: [storyId], references: [id], onDelete: Cascade)
}

model FriendRequest {
  id            Int       @id @default(autoincrement())
  senderId      Int
  receiverId    Int
  status        FriendRequestStatus @default(PENDING)
  createdAt     DateTime  @default(now())

  sender        User      @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver      User      @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friend {
  id         Int      @id @default(autoincrement())
  userId    Int
  user       User     @relation(name: "userFriendships",fields: [userId], references: [id], onDelete: Cascade)

  friendId Int
  friend    User   @relation(name: "friendFriendships",fields: [friendId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([userId, friendId])
  @@unique([friendId, userId])
}

model Post {
  id          Int    @id @default(autoincrement())
  authorId Int
  content String @db.LongText
  author      User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions           PostReaction[]
  postAsset   PostAsset[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
}

model PostAsset {
  id Int @id @default(autoincrement())
  postId Int
  url String
  type AssetType @default(Image)

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum AssetType {
  Video
  Image
}

model PostReaction {
  id                  Int      @id @default(autoincrement())
  postId              Int
  userId              Int
  reaction            Reaction @default(LOVE)
  post                Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

enum Reaction {
  LOVE
  FIRE
  ROCKET
  SHOCKED
}

model Story {
  id        Int      @id @default(autoincrement())
  creatorId  Int
  content   String   
  createdAt DateTime @default(now())
  creator    User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  viewers   StoryViewer[]
  replies   Message[] @relation("StoryReplies")
}

model StoryViewer {
  storyId Int
  userId  Int
  viewedAt DateTime @default(now())

  story   Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([storyId, userId])
  @@unique([storyId, userId])
}
